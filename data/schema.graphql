"""
A folder containing notes
"""
type Folder {
  id: ID!
  name: String

  """
  Notes inside the folder
  """
  notes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NoteConnection!
}

"""
The connection type for Folder.
"""
type FolderConnection {
  """
  A list of edges.
  """
  edges: [FolderEdge]

  """
  A list of nodes.
  """
  nodes: [Folder]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type FolderEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Folder
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

"""
Autogenerated input type of LoginMutation
"""
input LoginMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  name: String
  password: String!
}

"""
Autogenerated return type of LoginMutation
"""
type LoginMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  viewer: User
}

type Mutation {
  loginMutation(input: LoginMutationInput!): LoginMutationPayload!
  updateNoteContent(input: UpdateNoteContentInput!): UpdateNoteContentPayload
}

"""
A note
"""
type Note {
  content: String
  folder: Folder
  id: ID!

  """
  Tags that are representing this note
  """
  tags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TagConnection!
  title: String
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Note.
"""
type NoteConnection {
  """
  A list of edges.
  """
  edges: [NoteEdge]

  """
  A list of nodes.
  """
  nodes: [Note]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type NoteEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Note
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

"""
The query root of this schema
"""
type Query {
  viewer(email: String!, password: String!): User
}

"""
Object to tag notes
"""
type Tag {
  id: ID!
  name: String

  """
  Notes that are tagged by this tag
  """
  notes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NoteConnection!
}

"""
The connection type for Tag.
"""
type TagConnection {
  """
  A list of edges.
  """
  edges: [TagEdge]

  """
  A list of nodes.
  """
  nodes: [Tag]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TagEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Tag
}

"""
Autogenerated input type of UpdateNoteContent
"""
input UpdateNoteContentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  content: String!
  email: String!
  noteId: ID!
}

"""
Autogenerated return type of UpdateNoteContent
"""
type UpdateNoteContentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  updatedNote: Note!
}

"""
A user
"""
type User {
  email: String

  """
  An Specific folder
  """
  folder(id: ID!): Folder

  """
  Folders made by the user
  """
  folders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): FolderConnection!
  id: ID!
  name: String

  """
  An Specific note
  """
  note(id: ID!): Note

  """
  Notes made by the user
  """
  notes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NoteConnection!

  """
  Tags made by the user
  """
  tags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TagConnection!
}